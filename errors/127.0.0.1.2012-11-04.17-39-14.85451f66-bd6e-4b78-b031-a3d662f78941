(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'E'"
p3
sS'layer'
p4
S'/home/unic/web2py/applications/Award_Manager/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n@auth.requires_login()\ndef index():\n  """\n  example action using the internationalization operator T and flash\n  rendered by views/default/index.html or views/generic.html\n  """\n  users1 = db().select(db.Lpref.ALL)\n  users2 = db().select(db.Lpref.ALL)\n  for i in users1:\n      for j in users2:\n          if i.id > j.id:\n              if i.E == j.E:\n                  db(db.Lpref.id == j.id).delete()\n  images=db().select(db.Book.ALL)\n #   return dict(message=T(\'Hello World\'))\n  return dict(images=images)\ndef admin():\n    return dict()\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n#@auth.requires_login()\ndef choose():\n  users1 = db().select(db.User.ALL, orderby=db.User.Name)\n  users2 = db().select(db.User.ALL, orderby=db.User.Name)\n  for i in users1:\n      for j in users2:\n          if i.id < j.id:\n              if i.RollNo == j.RollNo:\n                  db(db.User.id == i.id).update(Total=i.Total+j.Total)\n                  db(db.User.id == i.id).update(Award1=j.Award)\n                  db(db.User.id == j.id).delete()\n  users = db().select(db.User.ALL, orderby=db.User.Name)\n  return dict(users=users)\n\ndef show():\n User = db.User(request.args(0)) or redirect(URL(\'choose\'))\n Books = db().select(db.Book.ALL, orderby=db.Book.Name)\n UPBooks = db(db.UPBook.usd==User.RollNo).select()\n upbooks1 = db(db.UPBook.usd==User.RollNo).select()\n upbooks = db(db.UPBook.usd==User.RollNo).select()\n \n for i in upbooks:\n      for j in upbooks1:\n          if i.id < j.id:\n              if i.Bid == j.Bid:\n                 db(db.UPBook.Bid == j.Bid).delete()\n langu = db().select(db.Lpref.ALL)\n lang = db().select(db.lang.ALL)\n return dict(User=User,UPBooks=UPBooks,Books=Books,langu=langu,lang=lang)\n\ndef preference():\n  db.Lpref.E.default=auth.user.email\n  form1 = crud.create(db.Lpref,\n         next=URL("index"))\n  users1 = db().select(db.Lpref.ALL)\n  users2 = db().select(db.Lpref.ALL)\n  for i in users1:\n      for j in users2:\n          if i.id > j.id:\n              if i.E == j.E:\n                  db(db.Lpref.id == j.id).delete()\n  return dict(form1=form1)\ndef total():\n   users = db().select(db.User.ALL, orderby=db.User.Name)\n  # award = db().select(db.Admin.ALL).first()\n   award = db(db.Admin.id > 0).select().first()\n   return dict(users=users,award=award)\ndef Admin():  \n  form2 = crud.create(db.Admin,\n         next=URL("admin"))\n  users1 = db().select(db.Admin.ALL)\n  users2 = db().select(db.Admin.ALL)\n  for i in users1:\n      for j in users2:\n          if i.id > j.id:\n              if i.E == j.E:\n                  db(db.Admin.id == j.id).delete()\n  return dict(form2=form2)\ndef submit():\n db(request.args(0) == db.User.id).update(flag = 1)\n users = db().select(db.User.ALL, orderby=db.User.Name)\n return dict(users=users)\ndef upload():\n    if request.vars.csvfile != None:\n        table = db[request.vars.table]\n        file = request.vars.csvfile.file\n        table.import_from_csv_file(file) #Import from the csv file\n        award = db(db.Admin.id > 0).select().first()                                         \n        #query = db.stlist.flag==""\n        #db(query).update(flag="1")         \n        for k in db(db.User.Award=="D1").select():\n            k.Total=award.D1                                                        #Change the value to change the cost of D1\n            k.update_record()\n        for k in db(db.User.Award=="D2").select():\n            k.Total=award.D2                                                        #change the value to cost of D2\n            k.update_record()\n        for k in db(db.User.Award=="D3").select():\n            k.Total=award.D3                                                       #Change the value to change the cost of D3\n            k.update_record()\n        for k in db(db.User.Award=="ML").select():\n            k.Total=award.ML                                                       #Change the value to change the cost of ML\n            k.update_record()\n        #db(db.stlist.Award==k).update(total="1200")\n        #response.flash = \'Students List uploaded\'\n    users1 = db().select(db.User.ALL, orderby=db.User.Name)\n    users2 = db().select(db.User.ALL, orderby=db.User.Name)\n    for i in users1:\n         for j in users2:\n           if i.id < j.id:\n              if i.RollNo == j.RollNo:\n                  db(db.User.id == i.id).update(Total=i.Total+j.Total)\n                  db(db.User.id == i.id).update(Award1=j.Award)\n                  db(db.User.id == j.id).delete()  \n \n        \n    return dict()\n#@auth.requires_membership(\'Administrator\')\ndef upload1():\n     if request.vars.csvfile != None:\n        table = db[request.vars.table]\n        file = request.vars.csvfile.file\n        table.import_from_csv_file(file)                                          #Import from the csv file\n        response.flash = \'Books List uploaded\'\n     return dict()\ndef update():\n  db.UPBook.insert(Stu_name=request.args(0),usd=request.args(1),Name=request.args(2),Language=request.args(3),Bid=request.args(7),Copies=request.args(8),Cost=request.args(5))\n  db(db.User.id ==request.args(4)).update(Uptotal=int(int(request.args(6))+int(request.args(5))))\n  db(db.Book.id ==request.args(7)).update(Copies=int(int(request.args(8))-1))\n  #db.UPBook.Stu_name.default = request.args(0)\n  #db.UPBook.usd.default = request.args(1))\n  #db.UPBook.Name.default=request.args(2)\n  #db.UPBook.Language.default=request.args(3)\n  #return dict(redirect(URL(\'show\')))\n  User = db.User(request.args(4)) or redirect(URL(\'choose\'))\n  upbooks1 = db(db.UPBook.usd==User.RollNo).select()\n  upbooks = db(db.UPBook.usd==User.RollNo).select()\n  \n  for i in upbooks:\n      for j in upbooks1:\n          if i.id < j.id:\n              if i.Bid == j.Bid:\n                 \n                  db(db.UPBook.id == j.id).delete()\n  \n  UPBooks = db(db.UPBook.usd==request.args(1)).select()\n  langu = db().select(db.Lpref.ALL)\n  lang = db().select(db.lang.ALL)\n  Books = db().select(db.Book.ALL, orderby=db.Book.Name)\n  return dict(User=User,UPBooks=UPBooks,Books=Books,lang=lang,langu=langu)\ndef delete():\n  db(db.UPBook.id == request.args(2)).delete()\n  db(db.User.id ==request.args(0)).update(Uptotal=int(int(request.args(1))-int(request.args(6))))\n  db(db.Book.id ==request.args(4)).update(Copies=int(int(request.args(3))))\n  User = db.User(request.args(0)) or redirect(URL(\'choose\'))\n  UPBooks = db(db.UPBook.usd==request.args(5)).select()\n  Books = db().select(db.Book.ALL, orderby=db.Book.Name)\n  langu = db().select(db.Lpref.ALL)\n  lang = db().select(db.lang.ALL)\n  return dict(User=User,UPBooks=UPBooks,Books=Books,langu=langu,lang=lang)\ndef choose1():\n prebooks = db(db.prebook.usd == auth.user_id).select()\n Books = db().select(db.Book.ALL, orderby=db.Book.Name)\n return dict(prebooks=prebooks,Books=Books)\n \n\ndef update1():\n  db.prebook.insert(usd=request.args(0),Name=request.args(1),Language=request.args(2),Bid=request.args(3),Stu_name=request.args(4))\n  db(db.prebook.Stu_name == \'static\').delete()\n \n  #db.UPBook.Stu_name.default = request.args(0)\n  #db.UPBook.usd.default = request.args(1))\n  #db.UPBook.Name.default=request.args(2)\n  #db.UPBook.Language.default=request.args(3)\n  #return dict(redirect(URL(\'show\')))\n # User = db.User(request.args(0)) or redirect(URL(\'choose1\'))\n\n  \n  prebooks2 = db(db.prebook.usd ==request.args(0)).select()\n  prebooks1 = db(db.prebook.usd ==request.args(0)).select()\n  \n  for i in prebooks2:\n      for j in prebooks1:\n          if i.id < j.id:\n              if i.Bid == j.Bid:\n                 \n                  db(db.prebook.id == j.id).delete()\n  prebooks = db(db.prebook.usd ==request.args(0)).select()\n  Books = db().select(db.Book.ALL, orderby=db.Book.Name)\n  return dict(prebooks=prebooks,Books=Books)\ndef delete1():\n  db(db.prebook.id == request.args(1)).delete()\n  \n  prebooks = db(db.prebook.usd == request.args(0)).select()\n  Books = db().select(db.Book.ALL, orderby=db.Book.Name)\n  return dict(prebooks=prebooks,Books=Books)\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\ndef manage():\n    grid = SQLFORM.smartgrid(db.UPBook)\n    return dict(grid=grid)\n\nresponse._vars=response._caller(Admin)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/usr/lib/pymodules/python2.7/gluon/restricted.py", line 204, in restricted\n    exec ccode in environment\n  File "/home/unic/web2py/applications/Award_Manager/controllers/default.py", line 257, in <module>\n  File "/usr/lib/pymodules/python2.7/gluon/globals.py", line 172, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/unic/web2py/applications/Award_Manager/controllers/default.py", line 99, in Admin\n    if i.E == j.E:\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 4440, in __getattr__\n    return self[key]\n  File "/usr/lib/pymodules/python2.7/gluon/dal.py", line 4431, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'E\'\n'
p11
s.